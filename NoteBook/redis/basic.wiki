= Redis基础 =
== 数据类型 ==
=== String ===
# 存放字符串，整形，浮点型值
# 利用SDS，即丰富了C字符串后的一种数据结构，比C字符串更高效
# 基本操作
	- GET
	- SET
	- DEL
	- INCR：INCR key-name
	- DECR：DECR key-name
	- INCRBY：INCRBY key-name amount
	- DECRBY：DECRBY key-name amount
	- INCRBYFLOAT：INCRBYFLOAT key-name amount
	- APPEND：APPEND key-name value
	- GETRANGE：GETRANGE key-name start end
	- GETBIT：GETBIT key-name offset 返回指定偏移的比特
	- SETBIT：SETBIT key-name offset
	- BITCOUNT：BITCOUNT key-name [start end]
	- BITOP：BITOP operation dest-key key-name [key-name ...] Performs one of the bitwise operations,  AND ,  OR ,  XOR , or  NOT , on the strings provided, storing the result in the destination key
=== List ===
# 存放一个有序的字符串序列
# 利用Linked List实现
# 基本操作
	- LPUSH/RPUSH
	- LPOP/RPOP
	- LINDEX：依照index值取值
	- LRANGE：依照位置取多个值
	- LTRIM：LTRIM key-name start end，截取list
	- BLPOP：BLPOP key-name [key-name ...] timeout：Pops the leftmost item from the first non-empty LIST, or waits the timeout in seconds for an item 
	- BRPOP
	- BRPOPLPUSH
	- RPOPLPUSH
=== Set ===
# 存放不重复的字符串序列
# 利用Hash表实现
# 基本操作
	- SADD：增加元素
	- SREM：去除元素
	- SISMEMBER：检查是否是成员
	- SMEMBERS：返回所有成员
	- SCARD: SCARD key-name 返回set中成员的数量
	- SRANDMEMBER:SRANDMEMBER key-name [count] 返回随几个成员，count为正数，返回的成员不重复，为负数时，返回的成员可以重复
	- SPOP:SPOP key-name 去除并返回一个随机的成员
	- SMOVE: SMOVE source-key dest-key 如果源中有该成员则将其移动到目的key中，并返回该对象
	- SDIFF
	- SDIFFSTORE
	- SINTER
	- SINTERSTORE
	- SUNION
	- SUNIONSTORE
=== Hash ===
# 存放一组键值对映射，值可以是String中可以存放的值
# 可以视为一个小型的Redis数据库
# 基本操作
	- HSET：在某一个键下存储一个值
	- HGET：按照一个键取值
	- HGETALL：返回整个hash
	- HDEL：如果一个键存在，则移除它
=== ZSet ===
# 与Hash类似，包括成员-分数对
# 基本操作
	- ZADD
	- ZRANGE：基于分数排序后，获得一种一段成员
	- ZRANGEBYSCORE：基于一个分数段取出一段成员
	- ZREM
