== 一些定义 ==
树的度:: 有根树中一个节点x的孩子的个数为x的度

深度:: 从根节点r到节点x的简单路径上边的数目，为x的深度

节点在树中的高度:: 指的是该节点到叶节点最长的一条简单路径上边的数目

树的高度:: 树中节点的最大深度

定理1:: 如果T为一个有$\lambda$层的二叉树，则叶子节点最多不超过$2^{\lambda-1}$个
定理2:: 如果T为一个二叉树，则k深度的叶子节点最多不超过$2^k$个
定理3:: 如果一共有N个节点，则T的层数最少为$\lceil \lg {N+1} \rceil$
定理4:: 如果T有L个叶子节点，则T的层数最少有$\lceil \lg L \rceil+1$

== 二叉树(Binary Tree) ==
二叉树:: 每个节点有不多于两个孩子节点的树

=== 性质 ===
二叉树的平均深度$O(\sqrt{N})$，
而二叉搜索树的平均深度$O(\lg N)$
=== 应用 ===
表达式树:: 操作符为父节点，操作数为孩子节点的树

- 中序遍历表达式树，可以生成普通的表达式
- 后续遍历表达式树，可以生成 *后缀表达式*
*后缀表达式*:: 后缀表达式可以在没有括号，不知运算符优先级的情况下，正确的计算表达式的值

*通过后缀表达式生成表达式树* 


== 满二叉树(Full Binary Tree) ==
满二叉树:: 每一个节点，要么是叶子节点，要么有两个孩子节点

=== 性质 ===
对于非空满二叉树T
# 如果T有I个内部节点，则叶子节点数量L=I+1
# 如果T有I个内部节点，则节点总数N=2I+1
# 如果T总共有N个节点，则内部节点的数量I=(N-1)/2
# 如果T总共有N个节点，则叶子节点数量L=(N+1)/2
# 如果T有L个叶子节点，则总节点数N=2L-1
# 如果T有L个叶子节点，则内部节点数量I=L-1

总体来说，对于满二叉树，节点总数量，内部节点数量，叶子节点数量，知道其中之一，即可计算出其他两个
== 完全二叉树(Complete Binary Tree) ==
完全二叉树:: 除了最后一层，每一层都是满的，且最后一层的所有节点都靠左排列


