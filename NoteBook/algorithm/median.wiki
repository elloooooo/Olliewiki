%title 中位数与顺序统计量
%toc
= 中位数与顺序统计量 =
中位数:: 数列中间大小的数，如果排序后的数列`A`长度$n$为奇数，则中位数为`A[n/2]`,如果$n$为偶数，怎中间两个数分别为上中位数和下中位数。
顺序统计量:: 数列中第n大的数，就是数列的第n个顺序统计量
== 最大最小值 ==
=== 最大或最小值 ===
渐进最优时间$\Theta(n)$，需要比较$n-1$次
=== 代码 ===
{{{class="brush:java; toolbar:false"
	//获得最大值
	public void getMax(){
		this.selectedData = 0;
		for(int i=0;i<this.data.length;i++){
			if(this.data[i]>this.selectedData){
				this.selectedData = this.data[i];
			}
		}
	}
	
	//获得最小值
	public void getMin(){
		this.selectedData=9999;
		for(int i=0;i<this.data.length;i++){
			if(this.data[i]<this.selectedData){
				this.selectedData = this.data[i];
			}
		}
	}

}}}
=== 最大最小值 ===
先将一对数字进行比较，然后大的与`max`比较，小的与`min`比较，这样总的比较次数为$\frac{3n}{2}$

而非$2(n-1)$
=== 代码 ===
{{{class="brush:java; toolbar:false"
	public void getMaxAndMin(){
		//比较开始时的Index
		int sIndex = 0;
		//初始化最大最小值
		switch (this.data.length%2) {
		case 0://数列为偶数
			if(this.data[0]>this.data[1]){
				this.max = this.data[0];
				this.min = this.data[1];
			}else{
				this.max = this.data[1];
				this.min = this.data[0];
			}
			sIndex = 2;//从下标2开始
			break;
		case 1://数列为奇数
				this.max = this.data[0];
				this.min = this.data[0];
				sIndex = 1;//从下标1开始
			break;
		default:
			break;
		}
		//每对数字需要三次比较
		for(int j=sIndex;j<this.data.length;j+=2){
			if(this.data[j]<this.data[j+1]){
				if(this.data[j]<this.min){
					this.min = this.data[j];
				}
				if(this.data[j+1]>this.max){
					this.max = this.data[j+1];
				}
			}else{
				if(this.data[j+1]<this.min){
					this.min = this.data[j+1];
				}
				if(this.data[j]>this.max){
					this.max = this.data[j];
				}
			}
		}
	}
}}}
== 期望为线性时间的选择算法 ==
=== 思路 ===
与快速排序相似，先按照某一元素划分，将小于该元素的值放在划分前段，大于该元素的值放在划分后段。
然后检查要选择的元素的序号是否是划分元素的序号，是，则返回该划分元素，否，检查该序号在划分的前段还是后段，
在相应段中继续划分，查找，完成上述步骤！
=== 代码 ===
{{{class="brush:java; toolbar:false"
	/**
	 * @param data 待划分数组
	 * @param p 起始下标
	 * @param r 结束下标
	 * @return 划分元素的下标（划分元素将作为划分后半部分的第一个元素）
	 */
	private int parition(int[] data, int p, int r) {
		int x = data[r];
		int i = p - 1;
		for (int j = p; j < r - p + 1; j++) {
			if (data[j] < x) {
				i++;
				int temp = data[i];
				data[i] = data[j];
				data[j] = temp;
			} else {
				int temp = data[r];
				data[r] = data[j];
				data[j] = temp;
			}
		}
		return i + 1;
	}

	public void randomizedSelect(int p, int r, int rank) {
		if (p == r) {
			this.selected = data[p];
		} else {
			int q = this.parition(this.data, p, r);
			if (rank == q - p+ 1) {
				this.selected = data[q];
			} else {
				if (rank < q + 1) {
					//如果要求的序号在划分元素之前，则在划分的前半部分划分查找
					randomizedSelect(p, q - 1, rank);
				} else {
					//否则在后半部分继续划分
					randomizedSelect(q, r, rank - q );
				}
			}
		}
	}
}}}
=== 算法分析 ===
最坏时间复杂度$\Theta(n^2)$,即每次划分都按照最大元素划分

如果元素互异，则可以在期望线性时间内获得任意顺序统计量
== 最坏情况为线性时间的选择算法 ==
依靠划分的选择算法中，划分的质量对算法的运行时间起着至关重要的作用。如果划分函数加入随机机制，即先随机将序列中任何一个元素与序列最后一个元素互换，则划分元素具有随机性。可以保证对任意的数据，不会始终发生最坏运行时间。

而本算法，则比随机选择更加细致的控制划分元素，即通过选择序列的中位数进行划分。

该算法不需要借助 *排序算法* ，所以不会受限于排序算法$n\lg n$的下界约束。
