= 并发类 =
线程状态：不可调度，可调度，
wait 所属的等待队列
- 对象所属的等待队列
== CAS(Compare and Set) ==
 *读写同时发生操作系统保证先写后读*
== ConcurrentHashMap ==
# 分段
	# 分为多个segment（固定数目），每一个就是一个小hashMap，两次hash定位到segment，对HashMap的操作，GET值，如果GET到null，则加锁，重新GET。SET操作，自旋操作！
	# 无阻塞所，无读写锁
# 利用modifyCount
# 每一个小HashMap超过装载因子的话，先扩容，再存

== ConcurrentLinkedQueue ==
=== 入队 ===
# 创建节点（可以并发）
# 将原来tail指向的节点的next指向新节点（问题，可能tail指向的节点已经不是最后一个节点（被其他线程改过一半））*问题的关键*
# tail指向新节点(如果更改tail指针时，新节点的next不为null，就不进行该操作，因为其他新增节点的线程一定一定已经将tail指针指向了最后一个节点)

第二个问题：就是通过CAS操作：获取tail然后CAS，如果set时，tail发生变化，就重新获取tail
=== 出队 ===
# 获得head指向的节点（获得了head节点，但是节点里面的内容已经被其他节点出队了）
 	-  所以：首先判断节点是否为空，如果不为空，CAS head为空，如果CAS成功，则返回该节点，如果不成功，说明别的线程已经将其出队，重新获得head节点，再试。
# 更新head指针的指向（CAS成功的线程，其他线程由于CAS失败，将会重新获得Head指向的节点）

== CopyOnWriteArrayList ==
写时先复制一份，改完在更新原来指针指向

== 读写锁 ==
阻塞式，自旋式

# 读读不互斥
# 读写互斥
# 写写互斥
# 同一线程部分读写，可重入
# 读锁可升级为写锁，写锁可以降级为读锁

=== 信号量 ===
# readers：读请求获得该锁，该值++；
# writers：写请求获得该锁，该值--（由于读读互斥，同时只能有一个线程获得该锁，所以该值只能是0或1）
# requestWriters：(类似一种排队策略，防止写请求饿死：即便写请求不能获得锁，也将++该值，以后就没有读请求可以获得这个锁了，当前读请求执行完后，notifyAll所有阻塞的写请求)

- 线程申请读锁，条件writers=0，requestWriters=0；
- 线程申请写锁，条件readers=0，如果申请不到，requestWriters++；

=== 可重入特性 ===
- 为了实现可重入，锁需要有map，保存线程==>线程获得锁的次数
	-  map:key=>thread value=>int(获得锁++，释放--)
- 当一个线程释放锁后，map中的value减为0，则readers--
TIPS：因为对map的操作都是同步操作，所以不需要该Map为线程安全容器

=== 升降级特性 ===
- 有且只有当前线程获得读锁，才能升级为写锁。即readlock==1时，就可以升级为写锁,同时将会把readlock--，最后直接unlock写锁就好了！
- 写锁直接可以降级为读锁；
