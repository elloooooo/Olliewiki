== List ADT ==
=== ArrayList ===
提供了可增长数组的实现
优点:: 对get和set方法花费常数时间
缺点:: 插入和删除代价高，除非变动发生在ArrayList末尾
=== LinkedList ===
双链表实现
优点:: 插入和删除新项开销小
缺点:: 不易做索引，所以对get调用是昂贵的，除非调用接近表的端点
== Map ADT ==
=== HashMap ===
提供了Map接口的散列实现，基于分离链接法
==== 分离链接法 ====
	- 基本结构就是一个表（数组），数组的每一个元素如果散列到了多个值，由链表保存
    - 要求所有元素必须提供`equal`,`hashCode`方法
    - 存数据时：根据`hashCode`的值，利用hash算法确定元素应该散列到表的那一项上，其实就是映射为数组的下标
	- 如果这个下标单元非空，就将这个元素存储与这个单源对应链表头
	- 取数据时：同样通过`hashCode`返回值计算数组下标，然后遍历链表，找出需要的值
==== 装填因子（load factor） ====
散列中元素个数与表大小的比值。默认大小为0.75

如果HashMap中的元素个数超过表初始化大小的0.75倍，则发出扩表过程，表的容量将会增大一倍，同时重新计算散列值，
该过程消耗较大，所以如果可以预见表大小，使用初始值新建表，则可以提高效率
=== TreeMap ===
`SortMap`的一种实现，保证影射中关键字保持逻辑上的有序状态，基本实现方法就是自顶向下的红黑树
== Set ADT ==
`Set`接口代表不允许重复元素的`Collection`。
=== HashSet ===
提供散列实现，同HashMap
=== TreeSet ===
`SortSet`接口的实现，保持各元素的有序状态。
因为需要保持有序状态，所以需要元素实现`Comparable`接口
